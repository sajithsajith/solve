import concurrent

from service.azure_openai import chat_gpt
from service.bedrock_anthropic import claude_sonnet_37
from service.google_gemini import gemini
from utils.file_utils import img_to_bytes


def run(data):
    """
    Processes input data using a specified pipeline to generate an output based on an image and a prompt.
    Args:
        data (dict): A dictionary containing the following keys:
            - "prompt" (str): The textual prompt to process.
            - "image_raw_bytes" (bytes): Raw bytes of the input image.
            - "image_bytes_base_64" (str): Base64-encoded string of the input image.
            - "pipeline" (int): Identifier for the processing pipeline to use (1, 2, or 3).
    Returns:
        str: The output generated by the selected pipeline.
    Pipeline options:
        1: Uses `claude_sonnet_37` with raw image bytes and prompt, with reasoning enabled.
        2: Uses `chat_gpt` with base64 image bytes and prompt.
        3: Uses `gemini` with raw image bytes, prompt, and a specific model version.
    """

    prompt, image_raw_bytes, image_bytes_base_64, pipeline = (
        data["prompt"],
        data["image_raw_bytes"],
        data["image_bytes_base_64"],
        data["pipeline"],
    )
    output = ""
    if pipeline == 1:
        output = claude_sonnet_37(image_raw_bytes, prompt, reasoning=True)
    if pipeline == 2:
        output = chat_gpt(image_bytes_base_64, prompt)
    if pipeline == 3:
        output = gemini(image_raw_bytes, prompt, "gemini-2.5-pro-preview-05-06")
    return output


def solve(image_path, prompt):
    """
    Processes a single image with a given prompt using multiple pipelines in parallel.
    Args:
        image_path (list): A list containing the file path(s) to the image(s). Must contain exactly one image path.
        prompt (str): The prompt or query to be used for processing the image.
    Returns:
        list or str: A list of classification results from each pipeline if exactly one image is provided.
                     Returns an error message string if no image or more than one image is found.
    Notes:
        - Utilizes a ThreadPoolExecutor to run the `run` function on each pipeline in parallel.
        - Requires the helper function `img_to_bytes` to convert the image to bytes and base64.
        - Expects the `run` function to process each test data dictionary.
    """
    
    if len(image_path) > 1:
        print("More than one image found")
        return "More than one image found"
    if len(image_path) < 1:
        print("No image found")
        return "No image found"
    image = img_to_bytes(image_path[0])

    test_data = [
        {
            "prompt": prompt,
            "image_raw_bytes": image["raw_bytes"],
            "image_bytes_base_64": image["bytes_base64"],
            "pipeline": x,
        }
        for x in range(1, 7)
    ]
    classification_result = []
    with concurrent.futures.ThreadPoolExecutor(10) as executor:
        results = executor.map(run, test_data)
    for result in results:
        classification_result.append(result)
    return classification_result
