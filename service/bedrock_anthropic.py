import os

import boto3
from botocore.exceptions import ClientError


def claude_sonnet_37(image, system_prompt, reasoning=False):
    """
    Invokes the Anthropic Claude 3 Sonnet model via AWS Bedrock to process an image and a system prompt.
    Args:
        image (bytes): The image data in PNG format as bytes.
        system_prompt (str): The system prompt to guide the model's response.
        reasoning (bool, optional): If True, enables the model's reasoning mode with a token budget. Defaults to False.
    Returns:
        str: The textual response generated by the model.
    Notes:
        - Requires AWS credentials and region to be set in environment variables: BEDROCK_REGION, BEDROCK_ACCESS_KEY_ID, BEDROCK_SECRET_ACCESS_KEY.
        - If reasoning is enabled, the model uses additional reasoning configuration.
        - Prints the output to the console for debugging purposes.
    """

    client = boto3.client(
        "bedrock-runtime",
        region_name=os.getenv("BEDROCK_REGION"),
        aws_access_key_id=os.getenv("BEDROCK_ACCESS_KEY_ID"),
        aws_secret_access_key=os.getenv("BEDROCK_SECRET_ACCESS_KEY"),
    )
    message = {
        "role": "user",
        "content": [{"image": {"format": "png", "source": {"bytes": image}}}],
    }
    messages = [message]

    reasoning_config = {"thinking": {"type": "enabled", "budget_tokens": 2000}}

    if reasoning:
        response = client.converse(
            modelId="us.anthropic.claude-3-7-sonnet-20250219-v1:0",
            messages=messages,
            system=[
                {
                    "text": system_prompt,
                },
            ],
            additionalModelRequestFields=reasoning_config,
        )
    else:
        response = client.converse(
            modelId="us.anthropic.claude-3-7-sonnet-20250219-v1:0",
            messages=messages,
            system=[
                {
                    "text": system_prompt,
                },
            ],
            inferenceConfig={
                "temperature": 0.2,
            },
        )
    content_blocks = response["output"]["message"]["content"]
    reasoning = None
    text = None
    for block in content_blocks:
        if "reasoningContent" in block:
            reasoning = block["reasoningContent"]["reasoningText"]["text"]
        if "text" in block:
            text = block["text"]
    print(f"\n\033[93mbedrock output:\n{text}\n{50*'-'}\033[0m\n")
    return text
